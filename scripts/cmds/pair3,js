const axios = require("axios");
const fs = require("fs-extra");

module.exports = {
  config: {
    name: "pair3",
    aliases: [],
    version: "1.0",
    author: "OTINXSANDIP",
    countDown: 5,
    role: 0,
    shortDescription: "Pair you with a random partner",
    longDescription: "Get paired randomly with someone in the chat with a love percentage",
    category: "love",
    guide: "{pn}"
  },

  onStart: async function({ api, event, usersData }) {
    try {
      const { threadID, messageID, senderID } = event;
      const threadInfo = await api.getThreadInfo(threadID);
      const participantIDs = threadInfo.participantIDs || [];
      const botID = api.getCurrentUserID();

      // Filter out bot and sender
      const listUserID = participantIDs.filter(id => id !== botID && id !== senderID);
      if (listUserID.length === 0) {
        return api.sendMessage("No one else is here to pair with!", threadID, messageID);
      }

      // Choose random partner
      const partnerID = listUserID[Math.floor(Math.random() * listUserID.length)];
      const senderName = (await usersData.get(senderID)).name || "User";
      const partnerName = (await usersData.get(partnerID)).name || "Partner";

      // Prepare mentions
      const mentions = [
        { id: senderID, tag: senderName },
        { id: partnerID, tag: partnerName }
      ];

      // Ensure cache folder exists
      await fs.ensureDir(__dirname + "/cache");

      // Fetch avatars and love gif
      const avatar1 = (await axios.get(`https://graph.facebook.com/${senderID}/picture?width=512&height=512&access_token=6628568379%7Cc1e620fa708a1d5696fb991c1bde5662`, { responseType: "arraybuffer" })).data;
      fs.writeFileSync(__dirname + "/cache/avt.png", Buffer.from(avatar1, "binary"));

      const avatar2 = (await axios.get(`https://graph.facebook.com/${partnerID}/picture?width=512&height=512&access_token=6628568379%7Cc1e620fa708a1d5696fb991c1bde5662`, { responseType: "arraybuffer" })).data;
      fs.writeFileSync(__dirname + "/cache/avt2.png", Buffer.from(avatar2, "binary"));

      const gifLove = (await axios.get(`https://i.ibb.co/y4dWfQq/image.gif`, { responseType: "arraybuffer" })).data;
      fs.writeFileSync(__dirname + "/cache/giflove.gif", Buffer.from(gifLove, "binary"));

      // Generate random love percentage
      const lovePercent = Math.floor(Math.random() * 101);

      // Prepare attachments as streams
      const attachments = [
        fs.createReadStream(__dirname + "/cache/avt.png"),
        fs.createReadStream(__dirname + "/cache/giflove.gif"),
        fs.createReadStream(__dirname + "/cache/avt2.png")
      ];

      // Send message
      const msg = {
        body: `ðŸŽ€ Successful pairing!\nðŸ’Œ Wishing you two hundred years of happiness\nâœ¨ Love percentage: ${lovePercent}%\n${senderName} ðŸ’— ${partnerName}`,
        mentions,
        attachment: attachments
      };

      return api.sendMessage(msg, threadID, messageID, () => {
        // Clean up temp files
        fs.unlinkSync(__dirname + "/cache/avt.png");
        fs.unlinkSync(__dirname + "/cache/avt2.png");
        fs.unlinkSync(__dirname + "/cache/giflove.gif");
      });

    } catch (error) {
      console.error("Error in pair3 command:", error);
      return api.sendMessage("Oops! Something went wrong while pairing you. Please try again.", event.threadID, event.messageID);
    }
  }
};
